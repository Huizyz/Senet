import components.*;

import java.util.Scanner;

public class SenetGame {

    private String playerName;
    private boolean playerStarts;
    private SenetBoard board;
    private ComputerPlayer computerPlayer;
    private ConsoleUI consoleUI;
    private GameUI gameUI;

    public SenetGame(String playerName, boolean playerStarts) {
        this.playerName = playerName;
        this.playerStarts = playerStarts;
        this.board = new SenetBoard();
        this.computerPlayer = new ComputerPlayer();
        this.consoleUI = new ConsoleUI(this); // Pass SenetGame instance to ConsoleUI
        this.gameUI = new GameUI(this);             // Pass SenetGame instance to GameUI
    }

    // Method to start the game
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for player's name
        System.out.print("Enter your name: ");
        String playerName = scanner.nextLine();

        // Ask player if they want to start or let computer start
        System.out.println("Do you want to start first? (Y/N)");
        String startChoice = scanner.nextLine().toUpperCase();
        boolean playerStarts = startChoice.equals("Y");

        // Initialize and start the game
        SenetGame senetGame = new SenetGame(playerName, playerStarts);
        senetGame.startGame();
    }

    public void startGame() {
        System.out.println("Welcome to Senet, " + playerName + "!");
        System.out.println("Let's begin the game.");

        if (playerStarts) {
            consoleUI.promptRollDice();
        } else {
            playComputerTurn();
        }
    }

    private void playPlayerTurn(int rollResult) {
        gameUI.updateBoardDisplay();
        System.out.println("Your turn:");

        // Implement player's turn logic here
        Scanner scanner = new Scanner(System.in);
        boolean validMoveMade = false;

        while (!validMoveMade) {
            System.out.print("Enter the starting house number (row and column): ");
            int fromRow = scanner.nextInt();
            int fromCol = scanner.nextInt();
            System.out.print("Enter the target house number (row and column): ");
            int toRow = scanner.nextInt();
            int toCol = scanner.nextInt();

            Piece piece = board.getPieceAt(fromRow, fromCol);

            if (piece != null && board.isValidMove(piece, fromRow, fromCol, toRow, toCol)) {
                board.movePiece(piece, fromRow, fromCol, toRow, toCol);
                validMoveMade = true;
            } else {
                System.out.println("Invalid move. Try again.");
            }
        }

        if (rollResult == 1 || rollResult == 4 || rollResult == 5) {
            System.out.println("You get another turn. Press the 'Roll Dice' button.");
        } else {
            playComputerTurn(rollResult);
        }
    }

    private void playComputerTurn(int rollResult) {
        gameUI.updateBoardDisplay();
        System.out.println("Computer's turn:");

        // Implement computer's turn logic here
        computerPlayer.makeMove(board, rollResult);

        if (rollResult == 1 || rollResult == 4 || rollResult == 5) {
            System.out.println("Computer gets another turn.");
            playComputerTurn();
        } else {
            consoleUI.promptRollDice();
        }
    }

    public boolean movePiece(int fromRow, int fromCol, int toRow, int toCol) {
        // Implement the movement logic here
        Piece piece = board.getPieceAt(fromRow, fromCol);
        if (piece != null && isValidMove(piece, fromRow, fromCol, toRow, toCol)) {
            board.movePiece(fromRow, fromCol, toRow, toCol);
            return true;
        }
        return false;
    }

    private boolean isValidMove(Piece piece, int fromRow, int fromCol, int toRow, int toCol) {
        // Add your move validation logic here
        return true;
    }

    public int rollDice() {
        Dice dice = new Dice();
        return dice.roll();
    }

    // Method to check if the game is over (example)
    public boolean isGameOver() {
        // Implement game over condition based on Senet rules
        // For example, if a player reaches the last house, they win
        return false; // Placeholder
    }

    // Method to get the current board state
    public SenetBoard getBoard() {
        return board;
    }
}
